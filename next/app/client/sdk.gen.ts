// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser, urlSearchParamsBodySerializer } from '@hey-api/client-fetch';
import type { ItemsReadItemsData, ItemsReadItemsError, ItemsReadItemsResponse, ItemsCreateItemData, ItemsCreateItemError, ItemsCreateItemResponse, ItemsReadItemData, ItemsReadItemError, ItemsReadItemResponse, ItemsUpdateItemData, ItemsUpdateItemError, ItemsUpdateItemResponse, ItemsDeleteItemData, ItemsDeleteItemError, ItemsDeleteItemResponse, LoginLoginAccessTokenData, LoginLoginAccessTokenError, LoginLoginAccessTokenResponse, LoginTestTokenError, LoginTestTokenResponse, LoginRecoverPasswordData, LoginRecoverPasswordError, LoginRecoverPasswordResponse, LoginResetPasswordData, LoginResetPasswordError, LoginResetPasswordResponse, LoginRecoverPasswordHtmlContentData, LoginRecoverPasswordHtmlContentError, LoginRecoverPasswordHtmlContentResponse, PrivateCreateUserData, PrivateCreateUserError, PrivateCreateUserResponse, UsersReadUsersData, UsersReadUsersError, UsersReadUsersResponse, UsersCreateUserData, UsersCreateUserError, UsersCreateUserResponse, UsersReadUserMeError, UsersReadUserMeResponse, UsersDeleteUserMeError, UsersDeleteUserMeResponse, UsersUpdateUserMeData, UsersUpdateUserMeError, UsersUpdateUserMeResponse, UsersUpdatePasswordMeData, UsersUpdatePasswordMeError, UsersUpdatePasswordMeResponse, UsersRegisterUserData, UsersRegisterUserError, UsersRegisterUserResponse, UsersReadUserByIdData, UsersReadUserByIdError, UsersReadUserByIdResponse, UsersUpdateUserData, UsersUpdateUserError, UsersUpdateUserResponse, UsersDeleteUserData, UsersDeleteUserError, UsersDeleteUserResponse, UtilsTestEmailData, UtilsTestEmailError, UtilsTestEmailResponse, UtilsHealthCheckError, UtilsHealthCheckResponse } from './types.gen';

export const client = createClient(createConfig());

export class ItemsService {
    /**
     * Read Items
     * Retrieve items.
     */
    public static readItems<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ItemsReadItemsData, ThrowOnError>) {
        return (options?.client ?? client).get<ItemsReadItemsResponse, ItemsReadItemsError, ThrowOnError>({
            ...options,
            url: '/api/v1/items/'
        });
    }

    /**
     * Create Item
     * Create new item.
     */
    public static createItem<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ItemsCreateItemData, ThrowOnError>) {
        return (options?.client ?? client).post<ItemsCreateItemResponse, ItemsCreateItemError, ThrowOnError>({
            ...options,
            url: '/api/v1/items/'
        });
    }

    /**
     * Read Item
     * Get item by ID.
     */
    public static readItem<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ItemsReadItemData, ThrowOnError>) {
        return (options?.client ?? client).get<ItemsReadItemResponse, ItemsReadItemError, ThrowOnError>({
            ...options,
            url: '/api/v1/items/{id}'
        });
    }

    /**
     * Update Item
     * Update an item.
     */
    public static updateItem<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ItemsUpdateItemData, ThrowOnError>) {
        return (options?.client ?? client).put<ItemsUpdateItemResponse, ItemsUpdateItemError, ThrowOnError>({
            ...options,
            url: '/api/v1/items/{id}'
        });
    }

    /**
     * Delete Item
     * Delete an item.
     */
    public static deleteItem<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ItemsDeleteItemData, ThrowOnError>) {
        return (options?.client ?? client).delete<ItemsDeleteItemResponse, ItemsDeleteItemError, ThrowOnError>({
            ...options,
            url: '/api/v1/items/{id}'
        });
    }

}

export class LoginService {
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests
     */
    public static loginAccessToken<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<LoginLoginAccessTokenData, ThrowOnError>) {
        return (options?.client ?? client).post<LoginLoginAccessTokenResponse, LoginLoginAccessTokenError, ThrowOnError>({
            ...options,
            ...urlSearchParamsBodySerializer,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                ...options?.headers
            },
            url: '/api/v1/login/access-token'
        });
    }

    /**
     * Test Token
     * Test access token
     */
    public static testToken<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).post<LoginTestTokenResponse, LoginTestTokenError, ThrowOnError>({
            ...options,
            url: '/api/v1/login/test-token'
        });
    }

    /**
     * Recover Password
     * Password Recovery
     */
    public static recoverPassword<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<LoginRecoverPasswordData, ThrowOnError>) {
        return (options?.client ?? client).post<LoginRecoverPasswordResponse, LoginRecoverPasswordError, ThrowOnError>({
            ...options,
            url: '/api/v1/password-recovery/{email}'
        });
    }

    /**
     * Reset Password
     * Reset password
     */
    public static resetPassword<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<LoginResetPasswordData, ThrowOnError>) {
        return (options?.client ?? client).post<LoginResetPasswordResponse, LoginResetPasswordError, ThrowOnError>({
            ...options,
            url: '/api/v1/reset-password/'
        });
    }

    /**
     * Recover Password Html Content
     * HTML Content for Password Recovery
     */
    public static recoverPasswordHtmlContent<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<LoginRecoverPasswordHtmlContentData, ThrowOnError>) {
        return (options?.client ?? client).post<LoginRecoverPasswordHtmlContentResponse, LoginRecoverPasswordHtmlContentError, ThrowOnError>({
            ...options,
            url: '/api/v1/password-recovery-html-content/{email}'
        });
    }

}

export class PrivateService {
    /**
     * Create User
     * Create a new user.
     */
    public static createUser<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PrivateCreateUserData, ThrowOnError>) {
        return (options?.client ?? client).post<PrivateCreateUserResponse, PrivateCreateUserError, ThrowOnError>({
            ...options,
            url: '/api/v1/private/users/'
        });
    }

}

export class UsersService {
    /**
     * Read Users
     * Retrieve users.
     */
    public static readUsers<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<UsersReadUsersData, ThrowOnError>) {
        return (options?.client ?? client).get<UsersReadUsersResponse, UsersReadUsersError, ThrowOnError>({
            ...options,
            url: '/api/v1/users/'
        });
    }

    /**
     * Create User
     * Create new user.
     */
    public static createUser<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UsersCreateUserData, ThrowOnError>) {
        return (options?.client ?? client).post<UsersCreateUserResponse, UsersCreateUserError, ThrowOnError>({
            ...options,
            url: '/api/v1/users/'
        });
    }

    /**
     * Read User Me
     * Get current user.
     */
    public static readUserMe<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<UsersReadUserMeResponse, UsersReadUserMeError, ThrowOnError>({
            ...options,
            url: '/api/v1/users/me'
        });
    }

    /**
     * Delete User Me
     * Delete own user.
     */
    public static deleteUserMe<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).delete<UsersDeleteUserMeResponse, UsersDeleteUserMeError, ThrowOnError>({
            ...options,
            url: '/api/v1/users/me'
        });
    }

    /**
     * Update User Me
     * Update own user.
     */
    public static updateUserMe<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UsersUpdateUserMeData, ThrowOnError>) {
        return (options?.client ?? client).patch<UsersUpdateUserMeResponse, UsersUpdateUserMeError, ThrowOnError>({
            ...options,
            url: '/api/v1/users/me'
        });
    }

    /**
     * Update Password Me
     * Update own password.
     */
    public static updatePasswordMe<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UsersUpdatePasswordMeData, ThrowOnError>) {
        return (options?.client ?? client).patch<UsersUpdatePasswordMeResponse, UsersUpdatePasswordMeError, ThrowOnError>({
            ...options,
            url: '/api/v1/users/me/password'
        });
    }

    /**
     * Register User
     * Create new user without the need to be logged in.
     */
    public static registerUser<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UsersRegisterUserData, ThrowOnError>) {
        return (options?.client ?? client).post<UsersRegisterUserResponse, UsersRegisterUserError, ThrowOnError>({
            ...options,
            url: '/api/v1/users/signup'
        });
    }

    /**
     * Read User By Id
     * Get a specific user by id.
     */
    public static readUserById<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UsersReadUserByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<UsersReadUserByIdResponse, UsersReadUserByIdError, ThrowOnError>({
            ...options,
            url: '/api/v1/users/{user_id}'
        });
    }

    /**
     * Update User
     * Update a user.
     */
    public static updateUser<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UsersUpdateUserData, ThrowOnError>) {
        return (options?.client ?? client).patch<UsersUpdateUserResponse, UsersUpdateUserError, ThrowOnError>({
            ...options,
            url: '/api/v1/users/{user_id}'
        });
    }

    /**
     * Delete User
     * Delete a user.
     */
    public static deleteUser<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UsersDeleteUserData, ThrowOnError>) {
        return (options?.client ?? client).delete<UsersDeleteUserResponse, UsersDeleteUserError, ThrowOnError>({
            ...options,
            url: '/api/v1/users/{user_id}'
        });
    }

}

export class UtilsService {
    /**
     * Test Email
     * Test emails.
     */
    public static testEmail<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UtilsTestEmailData, ThrowOnError>) {
        return (options?.client ?? client).post<UtilsTestEmailResponse, UtilsTestEmailError, ThrowOnError>({
            ...options,
            url: '/api/v1/utils/test-email/'
        });
    }

    /**
     * Health Check
     */
    public static healthCheck<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<UtilsHealthCheckResponse, UtilsHealthCheckError, ThrowOnError>({
            ...options,
            url: '/api/v1/utils/health-check/'
        });
    }

}
